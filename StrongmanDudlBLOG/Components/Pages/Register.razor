@page "/Register/"
@rendermode InteractiveServer
@using Entity.DTOs.Post
@using StrongmanDudlBLOG.APIConnection
@using StrongmanDudlBLOG.Security

<PageTitle>Register</PageTitle>

<h3>Register</h3>
<EditForm Model="this" OnSubmit="Test" FormName="RegisterForm">
    <div>
        <label>Username</label>
        <InputText @bind-Value="sUsername" />
    </div>

    <div>
        <label>Email</label>
        <InputText @bind-Value="sEMail" />
    </div>

    <div>
        <label>Password</label>
        <InputText type="password" @bind-Value="sPassword" />
    </div>

    <button type="submit" disabled="@bIsLoading">
        @if (bIsLoading)
        {
            <span>Registrierung...</span>
        }
        else
        {
            <span>Register</span>
        }
    </button>
</EditForm>
    
@if (!string.IsNullOrEmpty(sMessage))
{
    <div class="alert @(bIsSuccess ? "alert-success" : "alert-danger")">
        @sMessage
    </div>
}


@code {
    string sUsername , sEMail, sPassword, sEncryptedEMail, sEncryptedPassword, sHashedEMail, sHashedPassword;
    bool bIsLoading = false;
    string sMessage = "";
    bool bIsSuccess = false;
    
    private async Task Test()
    {
        sMessage = "";
        if (string.IsNullOrEmpty(sUsername) || string.IsNullOrEmpty(sEMail) || string.IsNullOrEmpty(sPassword))
        {
            sMessage = "Please fill in all fields";
            bIsSuccess = false;
            return;
        }

        bIsLoading = true;
        sMessage = "";

        try
        {
            (sEncryptedEMail, sEncryptedPassword) = SecurityHandler.Instance.AESEncrypt(sEMail, sPassword);
            (sHashedEMail, sHashedPassword) = SecurityHandler.Instance.Hash(sEMail + sEncryptedEMail, sPassword + sEncryptedPassword);

            PostLoginDTO oDTO = new (sUsername, sHashedEMail, sHashedPassword);
            bool bSuccess = await APIService.Instance.PostUser().UserAsync(oDTO);

            if (bSuccess)
            {
                sMessage = "Registration successful!";
                bIsSuccess = true;
                sUsername = sEMail = sPassword = "";
                Console.WriteLine("Funktioniert");
            }
            else
            {
                sMessage = "Registration failed. Please try again.";
                bIsSuccess = false;
            }
        }
        catch (Exception e)
        {
            sMessage = $"Error: {e.Message}";
            bIsSuccess = false;
        }
        finally
        {
            bIsLoading = false;
            StateHasChanged();
        }
    }
}